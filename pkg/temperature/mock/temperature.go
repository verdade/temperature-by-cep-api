// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/temperature/temperature.go
//
// Generated by this command:
//
//	mockgen -source=pkg/temperature/temperature.go -destination=pkg/temperature/mock/temperature.go
//

// Package mock_temperature is a generated GoMock package.
package mock_temperature

import (
	context "context"
	reflect "reflect"

	temperature "github.com/verdade/temperature-by-cep-api/pkg/temperature"
	gomock "go.uber.org/mock/gomock"
)

// MockTemperatureFetcher is a mock of TemperatureFetcher interface.
type MockTemperatureFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTemperatureFetcherMockRecorder
}

// MockTemperatureFetcherMockRecorder is the mock recorder for MockTemperatureFetcher.
type MockTemperatureFetcherMockRecorder struct {
	mock *MockTemperatureFetcher
}

// NewMockTemperatureFetcher creates a new mock instance.
func NewMockTemperatureFetcher(ctrl *gomock.Controller) *MockTemperatureFetcher {
	mock := &MockTemperatureFetcher{ctrl: ctrl}
	mock.recorder = &MockTemperatureFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemperatureFetcher) EXPECT() *MockTemperatureFetcherMockRecorder {
	return m.recorder
}

// GetByCity mocks base method.
func (m *MockTemperatureFetcher) GetByCity(ctx context.Context, city string) (*temperature.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCity", ctx, city)
	ret0, _ := ret[0].(*temperature.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCity indicates an expected call of GetByCity.
func (mr *MockTemperatureFetcherMockRecorder) GetByCity(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCity", reflect.TypeOf((*MockTemperatureFetcher)(nil).GetByCity), ctx, city)
}
