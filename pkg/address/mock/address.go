// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/address/address.go
//
// Generated by this command:
//
//	mockgen -source=pkg/address/address.go -destination=pkg/address/mock/address.go
//

// Package mock_address is a generated GoMock package.
package mock_address

import (
	context "context"
	reflect "reflect"

	address "github.com/verdade/temperature-by-cep-api/pkg/address"
	gomock "go.uber.org/mock/gomock"
)

// MockAddressFetcher is a mock of AddressFetcher interface.
type MockAddressFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAddressFetcherMockRecorder
}

// MockAddressFetcherMockRecorder is the mock recorder for MockAddressFetcher.
type MockAddressFetcherMockRecorder struct {
	mock *MockAddressFetcher
}

// NewMockAddressFetcher creates a new mock instance.
func NewMockAddressFetcher(ctrl *gomock.Controller) *MockAddressFetcher {
	mock := &MockAddressFetcher{ctrl: ctrl}
	mock.recorder = &MockAddressFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressFetcher) EXPECT() *MockAddressFetcherMockRecorder {
	return m.recorder
}

// GetByZipCode mocks base method.
func (m *MockAddressFetcher) GetByZipCode(ctx context.Context, zipCode string) (*address.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByZipCode", ctx, zipCode)
	ret0, _ := ret[0].(*address.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByZipCode indicates an expected call of GetByZipCode.
func (mr *MockAddressFetcherMockRecorder) GetByZipCode(ctx, zipCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByZipCode", reflect.TypeOf((*MockAddressFetcher)(nil).GetByZipCode), ctx, zipCode)
}
